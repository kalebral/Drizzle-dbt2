#!/bin/sh

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2002-2008 Mark Wong & Open Source Development Labs, Inc.
#

if [ -z ${DBNAME} ]; then
	echo "DBNAME not defined."
	exit 1
fi

while getopts "l:i:o:s:" opt; do
	case $opt in
	i)
		ITERATIONS=$OPTARG
		;;
	l)
		PORT=${OPTARG}
		;;
	o)
		OUTPUT_DIR=$OPTARG
		;;
	s)
		SAMPLE_LENGTH=$OPTARG
		;;
	esac
done

if [ ! "x${PORT}" = "x" ]; then
	PORTARG="-p ${PORT}"
	PORTARG2="-l ${PORT}"
fi

PSQL="psql ${PORTARG} -e -d ${DBNAME}"

# Get the OS version that the database system is running on, in case it's
# different.
uname -a >> ${OUTPUT_DIR}/readme.txt

# Get database version.
pg_config --version >> $OUTPUT_DIR/readme.txt

# Get database parameters.
${PSQL} -c "select name, setting, source, short_desc from pg_settings order by source, name;"  > $OUTPUT_DIR/param.out
${PSQL} -c "show all"  > $OUTPUT_DIR/param-all.out

# Get indexes.
${PSQL} -c "select * from pg_stat_user_indexes;" -o $OUTPUT_DIR/indexes.out

# Get the plans before the test.
dbt2-pgsql-plans ${PORTARG2} -o ${OUTPUT_DIR}/plan0.out

COUNTER=0

while [ $COUNTER -lt $ITERATIONS ]; do
	${PSQL} -c "SELECT relname, pid, mode, granted FROM pg_locks, pg_class WHERE relfilenode = relation ORDER BY relname;" >> $OUTPUT_DIR/lockstats.out
	${PSQL} -c "SELECT * FROM pg_stat_activity;" >> $OUTPUT_DIR/db_activity.out
	${PSQL} -c "SELECT * FROM pg_stat_database WHERE datname ='${DBNAME}';" >> $OUTPUT_DIR/db_load.out
	${PSQL} -c "SELECT relid, relname, heap_blks_read, heap_blks_hit, idx_blks_read, idx_blks_hit FROM pg_statio_user_tables ORDER BY relname;" >> $OUTPUT_DIR/table_info.out
	${PSQL} -c "SELECT relid, indexrelid, relname, indexrelname, idx_blks_read, idx_blks_hit FROM pg_statio_user_indexes ORDER BY indexrelname;" >> $OUTPUT_DIR/index_info.out
	${PSQL} -c "SELECT * FROM pg_stat_user_tables;" >> $OUTPUT_DIR/table_scan.out
	${PSQL} -c "SELECT * FROM pg_stat_user_indexes;" >> $OUTPUT_DIR/indexes_scan.out

	COUNTER=$(( $COUNTER+1 ))
	sleep $SAMPLE_LENGTH
done

# Get the plans after the test.
dbt2-pgsql-plans ${PORTARG2} -o ${OUTPUT_DIR}/plan1.out
